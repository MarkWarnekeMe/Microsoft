name: 'Terraform'

on:
  push:
    paths-ignore:
    - 'docs/**'
    - '*.md'
    branches:
    - main
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '*.md'

jobs:
  shellcheck:
    name: 'shellcheck'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      env:
        # https://github.com/koalaman/shellcheck/wiki/SC2154 - var is referenced but not assigned. - `variables.sh`
        SHELLCHECK_OPTS: -e SC2154

  terraform:
    name: 'terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        env:
          TF_IN_AUTOMATION: true
        run:
          source ./hack/variables.sh &&
          source ./hack/secrets.sh &&
          cd ./terraform/Microsoft &&
          ./init.sh

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run:
          cd ./terraform/Microsoft &&
          terraform fmt -check -recursive

      - name: Terraform Plan
        id: plan
        env:
          TF_IN_AUTOMATION: true
        run:
          source ./hack/variables.sh &&
          source ./hack/secrets.sh &&
          cd ./terraform/Microsoft &&
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \n
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            \n
            </details>
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_IN_AUTOMATION: true
        run:
          source ./hack/variables.sh &&
          source ./hack/secrets.sh &&
          cd ./terraform/Microsoft &&
          terraform apply -auto-approve -input=false
